/**
 * looks for .gql or .graphql files
 * and builds out TS types for them
 * depends on @gql2ts/from-schema && merge-graphql-schemas
 * for core functionality
 */

import * as glob from 'glob-promise';
import { mergeTypes } from 'merge-graphql-schemas';
import { generateNamespace } from '@gql2ts/from-schema';
import * as fs from 'fs-extra';
import * as R from 'ramda';

export interface IgqlTsOpts {
    globPattern?: string;
    outFile?: string;
    nameSpace?: string;
}

const defaultOpts: IgqlTsOpts  = {
    globPattern: '**/*.gql',
    outFile: '',
    nameSpace: 'GQL'
};

const readFile: (fileName: string) => Promise<string> =
    (fileName) => fs.readFile(fileName, 'utf8');

const getGlobbedFilesLoad: (globPattern: string) => Promise<string[]> = async (globPattern) => {
    const files: string[]  = await glob(globPattern);
    const load: string[] = await Promise.all(R.map(readFile, files));
    return load;
};

export const getTypeDefs: (globPattern?: string) => Promise<string> = async (globPattern = '**/*.gql') => {
    try {
        const typesLoad: string[] = await getGlobbedFilesLoad(globPattern);
        const mergedTypes: string[] = mergeTypes(typesLoad);
        return R.join('', mergedTypes);
    } catch (error) {
        console.error(error);
    }
};

const addAutoGeneratedWarning = (tsTypes: string): string => {
    return `// This file is auto generated by the gqlToTs.ts module\n${tsTypes}`;
 };

export const generateTsFromGql: (options?: IgqlTsOpts) =>  Promise <string | any> = async (options = defaultOpts) => {
    try {
        const typeDefs: string = await getTypeDefs(options.globPattern);
        const namespaceOpts = { ignoreTypeNameDeclaration: true};
        const nameSpaceName = options.nameSpace || 'GQL';
        const tsNameSpace: string = generateNamespace(nameSpaceName, typeDefs, namespaceOpts, {});
        if (options.outFile && options.outFile.length) {
            fs.writeFile(options.outFile, addAutoGeneratedWarning(tsNameSpace));
        }
        return tsNameSpace;
    } catch (error) {
        console.error(error);
    }
};
